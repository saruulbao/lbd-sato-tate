

# This file was *autogenerated* from the file sato-tate.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100000 = Integer(100000); _sage_const_11 = Integer(11); _sage_const_2 = Integer(2); _sage_const_5000 = Integer(5000); _sage_const_0 = Integer(0); _sage_const_85 = Integer(85)
import matplotlib.pyplot as plt
from sage.all import *

''' Elliptic curves '''

def ec_aps(lmfdb_label, primes_up_to=_sage_const_100000 ):
    # construct elliptic curve from its LMFDB label
    # (https://www.lmfdb.org/EllipticCurve/Q/)
    E = EllipticCurve(lmfdb_label)

    # return the list of aps for primes up to a bound
    return E.aplist(primes_up_to)
    
def ec_histogram(label='11a1'):
    aps_histogram(ec_aps(label))

''' Newforms of weight k >= 2 '''

def modform_aps(N=_sage_const_11 , k=_sage_const_2 , num_primes=_sage_const_5000 ):
    #sage does not support weight one newform computations
    assert k >= _sage_const_2 

    newforms = Newforms(N, k)
    assert len(newforms) != _sage_const_0 

    # since we just want an example, we take
    # the first newform in the list
    f = newforms[_sage_const_0 ]
    return [f.coefficient(p) for p in primes_first_n(num_primes)]

def modform_histogram():
    aps_histogram(modform_aps())

''' Plotting '''

def aps_histogram(aps, B=_sage_const_85 ):
    # normalize the aps 
    normalized_aps = [RR(ap) / RR(sqrt(p)) for ap, p in zip(aps, primes_first_n(len(aps)))]

    # create a histogram from the given data with B bins
    plt.hist(normalized_aps, bins=B)
    # display the histogram
    plt.show(block=False)
    # save the histogram to a file
    plt.savefig("ec.png")
    # dumb hack to keep the display window open
    plt.show()

################################################################################

# this is the function that gets run when you 
# type `sage sato-tate.sage`
if __name__ == "__main__":
    ec_histogram()

